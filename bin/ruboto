#!/usr/bin/env ruby

begin
  require 'jruby'
  JRuby.objectspace = true
rescue LoadError
end

require 'rubygems'
require 'main'
require 'fileutils'
require 'rexml/document'
require 'jruby-jars'

# fix main (to an extent)
module Main
  class Program
    module InstanceMethods
      def setup_finalizers
        @finalizers ||= []
        ObjectSpace.define_finalizer(self) do
          while((f = @finalizers.pop)); f.call; end
        end
      end
    end
  end
end

$gem_root =  File.expand_path(__FILE__+ "/../..")
$assets = File.expand_path(__FILE__ + "/../../assets")

class AssetCopier
  def initialize(from, to)
    @from = from
    @to = to
  end

  def copy(from, to='')
    FileUtils.mkdir_p(File.join(@to, to))
    FileUtils.cp_r(Dir[File.join(@from, from)], File.join(@to, to))
  end

  def copy_from_absolute_path(from, to='')
    FileUtils.mkdir_p(File.join(@to, to))
    FileUtils.cp_r(Dir[from], File.join(@to, to))
  end
end

###########################################################################
#
# log_action: put text to stdout around the execution of a block
#

def log_action(initial_text, final_text="Done.", &block)
  $stdout.sync = true
  print initial_text, "..."
  yield
  puts final_text
end

###########################################################################
#
# reconfigure_jruby_libs:
#   - removes unneeded code from jruby-core
#   - moves ruby stdlib to the root of the ruby-stdlib jar
#

def reconfigure_jruby_libs
  jruby_core = JRubyJars::core_jar_path.split('/')[-1]
  log_action("Removing unneeded classes from #{jruby_core}") do
    Dir.mkdir "libs/tmp"
    Dir.chdir "libs/tmp"
    FileUtils.move "../#{jruby_core}", "."
    `jar -xf #{jruby_core}`
    File.delete jruby_core
    ['jni', 'org/jruby/ant', 'org/jruby/compiler/ir', 'org/jruby/demo', 'org/jruby/embed/bsf', 
     'org/jruby/embed/jsr223', 'org/jruby/ext/ffi','org/jruby/javasupport/bsf'
    ].each {|i| FileUtils.remove_dir i, true}
    `jar -cf ../#{jruby_core} .`
    Dir.chdir "../.."
    FileUtils.remove_dir "libs/tmp", true
  end

  jruby_stdlib = JRubyJars::stdlib_jar_path.split('/')[-1]
  log_action("Reformatting #{jruby_stdlib}") do
    Dir.mkdir "libs/tmp"
    Dir.chdir "libs/tmp"
    FileUtils.move "../#{jruby_stdlib}", "."
    `jar -xf #{jruby_stdlib}`
    File.delete jruby_stdlib
    FileUtils.move "META-INF/jruby.home/lib/ruby/1.8", ".."
    Dir.chdir "../1.8"
    FileUtils.remove_dir "../tmp", true
    `jar -cf ../#{jruby_stdlib} .`
    Dir.chdir "../.."
    FileUtils.remove_dir "libs/1.8", true
  end
end

###########################################################################
#
# REXML Additions:
#   Extends REXML::Element to provide information in the necessary format
#   to generate the appropriate code.
#

class REXML::Element
  def all_methods(method_base="all", methods_include="", methods_exclude="", remove_final=true)
    all_methods = get_elements("method")

    working_methods = case method_base
      when "all"
        all_methods
      when "none"
        []
      when "on"
        all_methods.select{|i| i.attribute("name").value.match(/^on[A-Z]/)} 
    end

    methods_include = methods_include.split(",") if methods_include.is_a?(String)
    all_methods.each{|i| working_methods << i if methods_include.include?(i.attribute("name").value)}
    methods_exclude = methods_exclude.split(",")  if methods_exclude.is_a?(String)
    working_methods = working_methods.select{|i| not methods_exclude.include?(i.attribute("name").value)}

    #remove methods marked final
    working_methods = working_methods.select{|i| (not i.attribute("final")) or i.attribute("final").value == "false"} if remove_final

    working_methods
  end

  def parameters
    get_elements("parameter").map {|p| [p.attribute("name").value, p.attribute("type").value.gsub("&lt;", "<").gsub("&gt;", ">")]}
  end

  def method_signature 
    "#{attribute("name")}(#{parameters.map{|i| i[1]}.join(',')})"
  end

  def constant_string
    "CB_" + attribute("name").value.gsub(/[A-Z]/) {|i| "_#{i}"}.upcase.gsub(/^ON_/, "")
  end

  def super_string
    if attribute("api_added") and 
        attribute("api_added").value.to_i > verify_min_sdk.to_i and 
        attribute("api_added").value.to_i <= verify_target_sdk.to_i
      nil
    elsif attribute("abstract") and attribute("abstract").value == "true"
      nil
    elsif name == "method"
      "super.#{attribute("name")}(#{parameters.map{|i| i[0]}.join(", ")});"
    elsif name == "constructor"
      "super(#{parameters.map{|i| i[0]}.join(", ")});"
    end
  end

  def default_return
    return nil unless attribute("return")
    case attribute("return").value
      when "boolean": "return false;"
      when "int":     "return 0;"
      when "void":    nil
      else            "return null;"
    end
  end

  def super_return
    rv = super_string
    return rv unless attribute("return")
    rv ? "return #{rv}" : default_return
  end

  def ruby_call
    rv = []

    params = parameters
    args = ""
    if params.size > 3
      args = ", args"
      rv << "IRubyObject[] args = {" + params.map{|i| "JavaUtil.convertJavaToRuby(getRuby(), #{i[0]})"}.join(", ") + "};"
    elsif params.size > 0
      args = ", " + params.map{|i| "JavaUtil.convertJavaToRuby(getRuby(), #{i[0]})"}.join(", ")
    end

    return_cast = ""
    if attribute("return") and (attribute("return").value.include?(".") or attribute("return").value == "int[]")
      return_cast = "return (#{attribute("return").value})"
    elsif attribute("return") and attribute("return").value == "int"
      return_cast = "return (Integer)"
    elsif attribute("return") and attribute("return").value != "void"
      return_cast = "return (#{attribute("return").value.capitalize})" 
    end
    return_cast = return_cast.gsub("&lt;", "<").gsub("&gt;", ">")

    convert_return = ""
    if attribute("return") and attribute("return").value != "void"
      convert_return = ".toJava(#{attribute("return").value}.class)" 
    end

    rv << "#{return_cast}RuntimeHelpers.invoke(getRuby().getCurrentContext(), callbackProcs[#{constant_string}], \"call\" #{args})#{convert_return};"
    rv
  end

  def method_definition
    method_call((attribute("return") ? attribute("return").value : "void"), attribute("name").value, parameters,
      if_else("callbackProcs[#{constant_string}] != null", 
        [super_string] + try_catch(ruby_call, ["re.printStackTrace();", default_return]), 
        [super_return])).indent.join("\n")
  end

  def constructor_definition(class_name)
    method_call("", class_name, parameters, [super_string]).indent.join("\n")
  end
end

###########################################################################
#
# Methods for formatting code
#

def method_call(return_type=nil, method_name="", parameters=[], body_clause=[]) 
  ["public #{return_type || ""} #{method_name}(" + parameters.map{|i| "#{i[1]} #{i[0]}"}.join(", ") + ") {",
    body_clause.indent, "}"]
end

def if_else(condition, if_clause, else_clause) 
  ["if (#{condition}) {", if_clause.indent, else_clause.compact.empty? ? nil : "} else {", else_clause.indent, "}"]
end

def try_catch(try_clause, catch_clause)
  ["try {", try_clause.indent, "} catch (RaiseException re) {", catch_clause.indent, "}"]
end

class Array
  def indent
    flatten.compact.map{|i| "  " + i}
  end
end

###########################################################################
#
# Build Subclass or Interface:
#

#
# build_file: Copies src to the appropriate location and uses 
#   the substitutions hash to modify the contents
#
def build_file(src, package, name, substitutions, dest='.')
  to = File.join(dest, "src/#{package.gsub('.', '/')}")

  FileUtils.cp(File.expand_path($gem_root + "/assets/src/#{src}.java"), to)
  FileUtils.move(File.join(to, "#{src}.java"), File.join(to, "#{name}.java")) if src != name

  file = File.join(to, "#{name}.java")
  text = File.read(file)
  substitutions.each {|k,v| text.gsub!(k, v)}

  File.open(file, 'w') {|f| f << text}
end

#
# get_class_or_interface: Opens the xml file and locates the specified class.
#   Aborts if the class is not found or if it is not available for  
#   all api levels
#
def get_class_or_interface(klass, force=false)
  $stdout.sync = true
  min_api = verify_min_sdk
  target_api = verify_target_sdk

  abort "ERROR: Can't parse package.#{a_type.capitalize} #{klass}" unless klass.match(/([a-z.]+)\.([A-Z][A-Za-z.]+)/)

  unless @api
    print "Loading Android API..."
    @api = REXML::Document.new(File.read(File.expand_path($gem_root + "/lib/java_class_gen/android_api.xml"))).root
    puts "Done."
  end

  element = @api.elements["package[@name='#{$1}']/[@name='#{$2}']"]
  abort "ERROR: #{a_type.capitalize} #{klass} not found" unless element

  abort "#{a_type.capitalize} not available in minSdkVersion (#{min_api}), added in #{element.attribute('api_added').value}" if 
          element.attribute('api_added') and element.attribute('api_added').value.to_i > min_api.to_i
  abort "#{a_type.capitalize} deprecated for targetSdkVersion (#{target_api}); use --force to create it" if 
          element.attribute('deprecated') and element.attribute('deprecated').value.to_i <= target_api.to_i
  abort "#{a_type.capitalize} removed for targetSdkVersion (#{target_api})" if 
          element.attribute('api_removed') and element.attribute('api_removed').value.to_i <= target_api.to_i

  element
end

#
# check_methods: Checks the methods to see if they are available for all api levels
#
def check_methods(methods, force=false)
  min_api = verify_min_sdk.to_i
  target_api = verify_target_sdk.to_i

  # Remove methods changed outside of the scope of the sdk versions
  methods = methods.select{|i| not i.attribute('api_added') or i.attribute('api_added').value.to_i <= target_api}
  methods = methods.select{|i| not i.attribute('deprecated') or i.attribute('deprecated').value.to_i > min_api}
  methods = methods.select{|i| not i.attribute('api_removed') or i.attribute('api_removed').value.to_i > min_api}

  # Inform and remove methods changed inside the scope of the sdk versions
  methods.select do |i|
    if i.attribute('api_added') and i.attribute('api_added').value.to_i > min_api and not force
      puts "Can't create #{i.method_signature} -- added in #{i.attribute('api_added')} -- exclude or force" 
      false
    elsif i.attribute('deprecated') and i.attribute('deprecated').value.to_i <= target_api and not force
      puts "Can't create #{i.method_signature} -- deprecated in #{i.attribute('deprecated')} -- exclude or force" 
      false
    elsif i.attribute('api_removed') and i.attribute('api_removed').value.to_i <= target_api
      puts "Can't create #{i.method_signature} -- removed in #{i.attribute('api_removed')}"
      false
    else
      true
    end
  end  
end

#
# generate_subclass_or_interface: Creates a subclass or interface based on the specifications.
#
def generate_subclass_or_interface(params)
  defaults = {:template => "InheritingClass", :method_base => "all", :method_include => "", :method_exclude => "", :force => false}
  params = defaults.merge(params)
  params[:package] = verify_package unless params[:package]

  # check the class and its parents
  hierarchy = [class_desc = get_class_or_interface(params[:class] || params[:interface])]
  while hierarchy[-1].name == "class" and hierarchy[-1].attribute("extends")
    hierarchy << get_class_or_interface(hierarchy[-1].attribute("extends").value)
  end

  puts "Generating methods for #{params[:name]}..."
  methods, methods_hash = [], {}
  # get methods from the hierachy (removing duplicates)
  hierarchy.each do |i|
    m = i.all_methods(params[:method_base], params[:method_include], params[:method_exclude])
    m = m.select{|j| methods_hash[j.method_signature].nil?}
    m.each{|j| methods_hash[j.method_signature] = j}
    methods += m
  end
  methods = check_methods(methods, params[:force])
  puts "Done. Methods created: #{methods.count}"

  # Remove any duplicate constants (use *args handle multiple parameter lists)
  constants = methods.map(&:constant_string).uniq

  build_file params[:template], params[:package], params[:name], {
               "THE_PACKAGE" => params[:package],
               "THE_ACTION" => class_desc.name == "class" ? "extends" : "implements",
               "THE_ANDROID_CLASS" => (params[:class] || params[:interface]),
               "THE_RUBOTO_CLASS" => params[:name],
               "THE_CONSTANTS" =>  constants.map {|i| "public static final int #{i} = #{constants.index(i)};"}.indent.join("\n"),
               "CONSTANTS_COUNT" => methods.count.to_s,
               "THE_CONSTRUCTORS" => class_desc.name == "class" ? 
                  class_desc.get_elements("constructor").map{|i| i.constructor_definition(params[:name])}.join("\n\n") : "",
               "THE_METHODS" => methods.map{|i| i.method_definition}.join("\n\n")
             }
end

#
# generate_core_classe: generates RubotoActivity, RubotoService, etc. based 
#   on the API specifications.
#
def generate_core_classes(params)
  hash = {:package => "org.ruboto"}

  %w(android.view.View.OnClickListener android.widget.AdapterView.OnItemClickListener).each do |i|
    name = i.split(".")[-1]
    if(params[:class] == name or params[:class] == "all")
      generate_subclass_or_interface(hash.merge({:class => i, :name => "Ruboto#{name}"}))
    end
  end

  %w(method_base method_include force).inject(hash) {|h, i| h[i.to_sym] = params[i.to_sym]; h}
  hash[:method_exclude] = params[:method_exclude].split(",").push("onCreate").push("onReceive").join(",")

  %w(android.app.Activity android.app.Service android.content.BroadcastReceiver android.view.View).each do |i|
    name = i.split(".")[-1]
    if(params[:class] == name or params[:class] == "all")
      generate_subclass_or_interface(
        hash.merge({:template => name == "View" ? "InheritingClass" : "Ruboto#{name}", :class => i, :name => "Ruboto#{name}"}))
    end
  end
end

###########################################################################
#
# Updating components
#

def update_jruby(force=nil)
  jruby_core = Dir.glob("libs/jruby-core-*.jar")[0]
  jruby_stdlib = Dir.glob("libs/jruby-stdlib-*.jar")[0]
  new_jruby_version = JRubyJars::core_jar_path.split('/')[-1][11..-5]

  unless force
    abort "cannot find existing jruby jars in libs. Make sure you're in the root directory of your app" if 
     (not jruby_core or not jruby_stdlib)

    current_jruby_version = jruby_core ? jruby_core[16..-5] : "None"
    abort "both jruby versions are #{new_jruby_version}. Nothing to update. Make sure you 'gem update jruby-jars' if there is a new version" if
      current_jruby_version == new_jruby_version

    puts "Current jruby version: #{current_jruby_version}"
    puts "New jruby version: #{new_jruby_version}"
  end

  copier = AssetCopier.new $assets, File.expand_path(".")
  log_action("Removing #{jruby_core}") {File.delete jruby_core} if jruby_core
  log_action("Removing #{jruby_stdlib}") {File.delete jruby_stdlib} if jruby_stdlib
  log_action("Copying #{JRubyJars::core_jar_path} to libs") {copier.copy_from_absolute_path JRubyJars::core_jar_path, "libs"}
  log_action("Copying #{JRubyJars::stdlib_jar_path} to libs") {copier.copy_from_absolute_path JRubyJars::stdlib_jar_path, "libs"}

  reconfigure_jruby_libs

  puts "JRuby version is now: #{new_jruby_version}"
end

def update_ruboto(force=nil)
  verify_manifest

  from = File.expand_path($gem_root + "/assets/assets/scripts/ruboto.rb")
  to = File.expand_path("./assets/scripts/ruboto.rb")

  from_text = File.read(from)
  to_text = File.read(to) if File.exists?(to)

  unless force
    puts "New version: #{from_text[/\$RUBOTO_VERSION = (\d+)/, 1]}"
    puts "Old version: #{to_text ? to_text[/\$RUBOTO_VERSION = (\d+)/, 1] : 'none'}"

    abort "The ruboto.rb verion has not changed. Use --force to force update." if 
      from_text[/\$RUBOTO_VERSION = (\d+)/, 1] == to_text[/\$RUBOTO_VERSION = (\d+)/, 1]
  end

  log_action("Copying ruboto.rb and setting the package name...") do
    File.open(to, 'w') {|f| f << from_text.gsub("THE_PACKAGE", verify_package).gsub("ACTIVITY_NAME", verify_activity)}
  end
end

###########################################################################
#
# Verify the presence of important components
#

def verify_manifest
  abort "cannot find your AndroidManifest.xml to extract info from it. Make sure you're in the root directory of your app" unless
    File.exists? 'AndroidManifest.xml'
  @manifest ||= REXML::Document.new(File.read('AndroidManifest.xml')).root
end

def verify_package
  verify_manifest
  @package ||= @manifest.attribute('package').value
end

def verify_activity
  verify_manifest
  @activity ||= @manifest.elements['application/activity'].attribute('android:name').value
end

def verify_sdk_versions
  verify_manifest
  @uses_sdk ||= @manifest.elements["uses-sdk"]
  abort "you must specify your sdk level in the manifest (e.g., <uses-sdk android:minSdkVersion='3' android:targetSdkVersion='8' />)" unless @uses_sdk
  @uses_sdk
end

def verify_min_sdk
  verify_sdk_versions
  @min_sdk ||= @uses_sdk.attribute('android:minSdkVersion').value
  abort "you must specify a minimum sdk level in the manifest (e.g., <uses-sdk android:minSdkVersion='3' android:targetSdkVersion='8' />)" unless @min_sdk
  @min_sdk
end

def verify_target_sdk
  verify_sdk_versions
  @target_sdk ||= @uses_sdk.attribute('android:targetSdkVersion').value
  abort "you must specify a target sdk level in the manifest (e.g., <uses-sdk android:minSdkVersion='3' android:targetSdkVersion='8' />)" unless @target_sdk
  @target_sdk
end

###########################################################################
#
# generate_inheriting_file:
#   Builds a script based subclass of Activity, Service, or BroadcastReceiver
#

def generate_inheriting_file(klass, name, package, script_name, dest='.')
  to = File.join(dest, "src/#{package.gsub('.', '/')}")

  FileUtils.cp(File.expand_path(__FILE__ + "/../../assets/src/Inheriting#{klass}.java"), to)
  FileUtils.move(File.join(to, "Inheriting#{klass}.java"), File.join(to, "#{name}.java"))

  file = File.join(to, "#{name}.java")
  text = File.read(file)
  File.open(file, 'w') do |f|
    f << text.gsub("THE_PACKAGE", package).gsub("Inheriting#{klass}", name).gsub("start.rb", script_name)
  end

  sample_source = File.read(File.join($assets, "samples/sample_#{underscore klass}.rb"))
  File.open File.join(dest, "assets/scripts/#{script_name}"), "a" do |f|
    f << sample_source
  end
end

# active_support/inflector.rb
def underscore(camel_cased_word)
  camel_cased_word.to_s.gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("-", "_").
    downcase
end



Main {
  mode "gen" do
    mode "app" do
      option("name"){
        required
        argument :required
        description "Name of your app"
      }
      option("target") {
        required
        argument :required
        defaults 'android-8'
        description "android version to target. must begin with 'android-' (e.g., 'android-8' for froyo)"
      }
      option("min_sdk") {
        required
        argument :required
        defaults 'android-3'
        description "minimum android version supported. must begin with 'android-'. (default 'android-3')"
      }
      option("path"){
        required
        argument :required
        description "path to where you want your app."
      }
      option("package"){
        required
        argument :required
        defaults 'org.ruboto.example'
        description "Name of package. Must be unique for every app. A common pattern is yourtld.yourdomain.appname (Ex. org.ruboto.irb)"
      }
      option("activity"){
        required
        argument :required
        defaults 'Main'
        description "name of your primary Activity"
      }

      def run
        path = params['path'].value
        name = params['name'].value
        target = params['target'].value
        min_sdk = params['min_sdk'].value
        package = params['package'].value
        activity = params['activity'].value

        abort "path must be to a directory that does not yet exist. it will be created" if
          File.exists?(path)

        root = File.expand_path(path)
        print "\nGenerating Android app #{name} in #{root}..."
        `android create project -n #{name} -t #{target} -p #{path} -k #{package} -a #{activity}`
        puts "Done"

        puts "\nCopying files:"
        copier = AssetCopier.new $assets, root

        %w{Rakefile .gitignore assets}.each do |f|
          log_action(f) {copier.copy f}
        end

        log_action("Ruboto java classes"){copier.copy "src/org/ruboto/*.java", "src/org/ruboto"}

        # Remember the current directory and chdir to the new app directory
        current_dir = Dir.pwd
        Dir.chdir root

        update_jruby true
 
        log_action("\nAdding activities (RubotoActivity and RubotoDialog) and SDK versions to the manifest") do
          verify_manifest.elements['application'].add_element 'activity', {"android:name" => "org.ruboto.RubotoActivity"}
          verify_manifest.elements['application'].add_element 'activity', {"android:name" => "org.ruboto.RubotoDialog", 
                                                                            "android:theme" => "@android:style/Theme.Dialog"}
          verify_manifest.add_element 'uses-sdk', {"android:minSdkVersion" => min_sdk[/\d+/], "android:targetSdkVersion" => target[/\d+/]}
          File.open("AndroidManifest.xml", 'w') {|f| verify_manifest.document.write(f, 4)}
        end

        update_ruboto true

        generate_core_classes(:class => "all", :method_base => "on", :method_include => "", :method_exclude => "", :force => true)

        # Go back to whence we came
        Dir.chdir current_dir

        log_action("Generating the default Activity and script") do
          generate_inheriting_file "Activity", activity, package, "#{underscore(activity)}.rb", path
        end

        puts "\nHello, #{name}\n"
      end
    end

    mode "class" do
      argument("class"){
        required
        description "the Android Class that you want."
      }

      option("script_name"){
        argument :required
        description "name of the ruby script in assets/scripts/ that this class will execute. should end in .rb. optional"
      }

      option("name"){
        required
        argument :required
        description "name of the class (and file). Should be CamelCase"
      }


      def run
        name = params['name'].value
        script_name = params['script_name'].value || "#{underscore(name)}.rb"
        klass = params['class'].value

        generate_inheriting_file klass, name, verify_package, script_name
      end
    end

    mode "subclass" do
      argument("class"){
        required
        description "the Android Class that you want to subclass (e.g., package.Class)."
      }

      option("name"){
        required
        argument :required
        description "name of the class (and file). Should be CamelCase"
      }

      option("method_base"){
        required
        validate {|i| %w(all on none).include?(i)}
        argument :required
        description "the base set of methods to generate (adjusted with method_include and method_exclude): all, none, on (e.g., onClick)"
      }

      option("method_include"){
        argument :required
        defaults ""
        description "additional methods to add to the base list"
      }

      option("method_exclude"){
        argument :required
        defaults ""
        description "methods to remove from the base list"
      }

      option("force"){
        cast :boolean
        description "force added and deprecated methods not excluded to be create"
      }

      def run
        generate_subclass_or_interface %w(class name method_base method_include method_exclude force).inject({}) {|h, i| h[i.to_sym] = params[i].value; h}
      end
    end

    mode "interface" do
      argument("interface"){
        required
        description "the Android Interface that you want to implement (e.g., package.Interface)."
      }

      option("name"){
        required
        argument :required
        description "name of the class (and file) that will implement the interface. Should be CamelCase"
      }

      def run
        generate_subclass_or_interface %w(interface name).inject({}) {|h, i| h[i.to_sym] = params[i].value; h}
      end
    end

    mode "core" do
      argument("class"){
        required
        validate {|i| %w(Activity Service BroadcastReceiver View OnClickListener OnItemClickListener all).include?(i)}
        description "Activity, Service, BroadcastReceiver, View, OnClickListener, OnItemClickListener, or all (default = all)"
      }

      option("method_base"){
        required
        argument :required
        validate {|i| %w(all on none).include?(i)}
        defaults "on"
        description "the base set of methods to generate (adjusted with method_include and method_exclude): all, none, on (e.g., onClick)"
      }

      option("method_include"){
        required
        argument :required
        defaults ""
        description "additional methods to add to the base list"
      }

      option("method_exclude"){
        required
        argument :required
        defaults ""
        description "methods to remove from the base list"
      }

      option("force"){
        cast :boolean
        description "force added and deprecated methods not excluded to be create"
      }

      def run
        generate_core_classes [:class, :method_base, :method_include, :method_exclude, :force].inject({}) {|h, i| h[i] = params[i.to_s].value; h}
      end
    end

    mode "key" do
      option("keystore"){
        default "~/.android/production.keystore"
        description "path to where the keystore will be saved. defaults to ~/.android/production.keystore"
      }

      option("alias"){
        required
        description "The 'alias' for the key. Identifies the key within the keystore. Required"
      }

      def run
        keystore = params['keystore'].value
        key_alias = params['alias'].value

        `keytool -genkey -keyalg rsa -keysize 4096 -validity 1000000 -keystore #{keystore} -alias #{key_alias}`
      end
    end
  end

  mode "update-jruby" do
    argument("what"){
      required
      validate {|i| %w(jruby ruboto).include?(i)}
      description "What do you want to update: 'jruby' or 'ruboto'"
    }

    option("force"){
      description "force and update even if the version hasn't changed"
    }

    def run
      case params['what'].value
        when "jruby": update_jruby(params['force'].value);
        when "ruboto": update_ruboto(params['force'].value);
      end
    end
  end

  # just running `ruboto`
  def run
    puts %Q{
      Ruboto -- Ruby for Android
      Execute `ruboto gen app --help` for instructions on how to generate a fresh Ruby-enabled Android app
      Execute `ruboto --help` for other options
    }
  end
}

